{"ast":null,"code":"import axios from 'axios';\nimport { useUserStore } from '@/store/index';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 5000\n});\n\n// 请求拦截器，添加认证token\napi.interceptors.request.use(config => {\n  // 在请求拦截器中使用Pinia store\n  // 注意：这里需要使用函数包装，因为拦截器是在应用初始化时创建的\n  const userStore = useUserStore();\n  const token = userStore.token;\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n/**\r\n * 项目服务\r\n */\nexport const projectService = {\n  /**\r\n   * 获取所有项目\r\n   * @returns {Promise<Array>} 项目列表\r\n   */\n  getAllProjects: async () => {\n    try {\n      const response = await api.get('/projects');\n      return response.data;\n    } catch (error) {\n      console.error('获取项目列表失败:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * 获取项目详情\r\n   * @param {string} id - 项目ID\r\n   * @returns {Promise<Object>} 项目详情\r\n   */\n  getProjectById: async id => {\n    try {\n      const response = await api.get(`/projects/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`获取项目 ${id} 详情失败:`, error);\n      throw error;\n    }\n  },\n  /**\r\n   * 创建项目\r\n   * @param {Object} projectData - 项目数据\r\n   * @returns {Promise<Object>} 创建的项目\r\n  6   */\n  createProject: async projectData => {\n    try {\n      const response = await api.post('/projects', projectData);\n      return response.data;\n    } catch (error) {\n      console.error('创建项目失败:', error);\n      throw error;\n    }\n  },\n  /**\r\n   * 更新项目\r\n   * @param {string} id - 项目ID\r\n   * @param {Object} projectData - 项目数据\r\n   * @returns {Promise<Object>} 更新后的项目\r\n   */\n  updateProject: async (id, projectData) => {\n    try {\n      const response = await api.put(`/projects/${id}`, projectData);\n      return response.data;\n    } catch (error) {\n      console.error(`更新项目 ${id} 失败:`, error);\n      throw error;\n    }\n  },\n  /**\r\n   * 删除项目\r\n   * @param {string} id - 项目ID\r\n   * @returns {Promise<void>}\r\n   */\n  deleteProject: async id => {\n    try {\n      await api.delete(`/projects/${id}`);\n    } catch (error) {\n      console.error(`删除项目 ${id} 失败:`, error);\n      throw error;\n    }\n  },\n  /**\r\n   * 获取项目阶段\r\n   * @param {string} projectId - 项目ID\r\n   * @returns {Promise<Array>} 项目阶段列表\r\n   */\n  getProjectPhases: async projectId => {\n    try {\n      const response = await api.get(`/projects/${projectId}/phases`);\n      return response.data;\n    } catch (error) {\n      console.error(`获取项目 ${projectId} 阶段失败:`, error);\n      throw error;\n    }\n  },\n  /**\r\n   * 订阅项目\r\n   * @param {string} projectId - 项目ID\r\n   * @returns {Promise<void>}\r\n   */\n  subscribeProject: async projectId => {\n    try {\n      await api.post(`/projects/${projectId}/subscribe`);\n    } catch (error) {\n      console.error(`订阅项目 ${projectId} 失败:`, error);\n      throw error;\n    }\n  },\n  /**\r\n   * 取消订阅项目\r\n   * @param {string} projectId - 项目ID\r\n   * @returns {Promise<void>}\r\n   */\n  unsubscribeProject: async projectId => {\n    try {\n      await api.delete(`/projects/${projectId}/subscribe`);\n    } catch (error) {\n      console.error(`取消订阅项目 ${projectId} 失败:`, error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","useUserStore","api","create","baseURL","timeout","interceptors","request","use","config","userStore","token","headers","Authorization","projectService","getAllProjects","response","get","data","error","console","getProjectById","id","createProject","projectData","post","updateProject","put","deleteProject","delete","getProjectPhases","projectId","subscribeProject","unsubscribeProject"],"sources":["d:/Graduate/graduate-1/SicnuGisProject/SicnuGeo/shared-city-version/src/services/project.service.js"],"sourcesContent":["import axios from 'axios';\r\nimport { useUserStore } from '@/store/index';\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: '/api',\r\n  timeout: 5000\r\n});\r\n\r\n// 请求拦截器，添加认证token\r\napi.interceptors.request.use(config => {\r\n  // 在请求拦截器中使用Pinia store\r\n  // 注意：这里需要使用函数包装，因为拦截器是在应用初始化时创建的\r\n  const userStore = useUserStore();\r\n  const token = userStore.token;\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n/**\r\n * 项目服务\r\n */\r\nexport const projectService = {\r\n  /**\r\n   * 获取所有项目\r\n   * @returns {Promise<Array>} 项目列表\r\n   */\r\n  getAllProjects: async () => {\r\n    try {\r\n      const response = await api.get('/projects');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('获取项目列表失败:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 获取项目详情\r\n   * @param {string} id - 项目ID\r\n   * @returns {Promise<Object>} 项目详情\r\n   */\r\n  getProjectById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/projects/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`获取项目 ${id} 详情失败:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 创建项目\r\n   * @param {Object} projectData - 项目数据\r\n   * @returns {Promise<Object>} 创建的项目\r\n6   */\r\n  createProject: async (projectData) => {\r\n    try {\r\n      const response = await api.post('/projects', projectData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('创建项目失败:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 更新项目\r\n   * @param {string} id - 项目ID\r\n   * @param {Object} projectData - 项目数据\r\n   * @returns {Promise<Object>} 更新后的项目\r\n   */\r\n  updateProject: async (id, projectData) => {\r\n    try {\r\n      const response = await api.put(`/projects/${id}`, projectData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`更新项目 ${id} 失败:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 删除项目\r\n   * @param {string} id - 项目ID\r\n   * @returns {Promise<void>}\r\n   */\r\n  deleteProject: async (id) => {\r\n    try {\r\n      await api.delete(`/projects/${id}`);\r\n    } catch (error) {\r\n      console.error(`删除项目 ${id} 失败:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 获取项目阶段\r\n   * @param {string} projectId - 项目ID\r\n   * @returns {Promise<Array>} 项目阶段列表\r\n   */\r\n  getProjectPhases: async (projectId) => {\r\n    try {\r\n      const response = await api.get(`/projects/${projectId}/phases`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`获取项目 ${projectId} 阶段失败:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 订阅项目\r\n   * @param {string} projectId - 项目ID\r\n   * @returns {Promise<void>}\r\n   */\r\n  subscribeProject: async (projectId) => {\r\n    try {\r\n      await api.post(`/projects/${projectId}/subscribe`);\r\n    } catch (error) {\r\n      console.error(`订阅项目 ${projectId} 失败:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 取消订阅项目\r\n   * @param {string} projectId - 项目ID\r\n   * @returns {Promise<void>}\r\n   */\r\n  unsubscribeProject: async (projectId) => {\r\n    try {\r\n      await api.delete(`/projects/${projectId}/subscribe`);\r\n    } catch (error) {\r\n      console.error(`取消订阅项目 ${projectId} 失败:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}