{"ast":null,"code":"// 用户存储 - 使用 Pinia 实现\nimport { defineStore } from 'pinia';\n\n// 创建 Pinia store\nexport const useUserStore = defineStore('user', {\n  // 状态定义\n  state: () => ({\n    users: [],\n    token: null,\n    currentUser: null\n  }),\n  // 获取器\n  getters: {\n    getAllUsers: state => state.users,\n    getCurrentUser: state => state.currentUser,\n    isAuthenticated: state => !!state.token\n  },\n  // 动作\n  actions: {\n    // 添加用户\n    addUser(user) {\n      if (!user || !user.id) {\n        console.error('Invalid user: Missing required fields');\n        return;\n      }\n      if (this.users.some(u => u.id === user.id)) {\n        console.warn(`User with ID ${user.id} already exists`);\n        return;\n      }\n      this.users.push(user);\n    },\n    // 根据 ID 获取用户\n    getUserById(id) {\n      return this.users.find(user => user.id === id);\n    },\n    // 根据 ID 删除用户\n    deleteUserById(id) {\n      if (!id) {\n        console.error('Invalid parameter: ID is required');\n        return false;\n      }\n      const initialLength = this.users.length;\n      this.users = this.users.filter(user => user.id !== id);\n      return this.users.length < initialLength;\n    },\n    // 设置当前用户\n    setCurrentUser(user) {\n      this.currentUser = user;\n    },\n    // 设置认证令牌\n    setToken(token) {\n      this.token = token;\n    },\n    // 清除认证信息\n    clearAuth() {\n      this.token = null;\n      this.currentUser = null;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","useUserStore","state","users","token","currentUser","getters","getAllUsers","getCurrentUser","isAuthenticated","actions","addUser","user","id","console","error","some","u","warn","push","getUserById","find","deleteUserById","initialLength","length","filter","setCurrentUser","setToken","clearAuth"],"sources":["C:/Users/hrs28/.trae-cn/SicnuGeo/shared-city-version/src/store/user.store.js"],"sourcesContent":["// 用户存储 - 使用 Pinia 实现\r\nimport { defineStore } from 'pinia';\r\n\r\n// 创建 Pinia store\r\nexport const useUserStore = defineStore('user', {\r\n  // 状态定义\r\n  state: () => ({\r\n    users: [],\r\n    token: null,\r\n    currentUser: null\r\n  }),\r\n\r\n  // 获取器\r\n  getters: {\r\n    getAllUsers: (state) => state.users,\r\n    getCurrentUser: (state) => state.currentUser,\r\n    isAuthenticated: (state) => !!state.token\r\n  },\r\n\r\n  // 动作\r\n  actions: {\r\n    // 添加用户\r\n    addUser(user) {\r\n      if (!user || !user.id) {\r\n        console.error('Invalid user: Missing required fields');\r\n        return;\r\n      }\r\n      if (this.users.some(u => u.id === user.id)) {\r\n        console.warn(`User with ID ${user.id} already exists`);\r\n        return;\r\n      }\r\n      this.users.push(user);\r\n    },\r\n\r\n    // 根据 ID 获取用户\r\n    getUserById(id) {\r\n      return this.users.find(user => user.id === id);\r\n    },\r\n\r\n    // 根据 ID 删除用户\r\n    deleteUserById(id) {\r\n      if (!id) {\r\n        console.error('Invalid parameter: ID is required');\r\n        return false;\r\n      }\r\n      const initialLength = this.users.length;\r\n      this.users = this.users.filter(user => user.id !== id);\r\n      return this.users.length < initialLength;\r\n    },\r\n\r\n    // 设置当前用户\r\n    setCurrentUser(user) {\r\n      this.currentUser = user;\r\n    },\r\n\r\n    // 设置认证令牌\r\n    setToken(token) {\r\n      this.token = token;\r\n    },\r\n\r\n    // 清除认证信息\r\n    clearAuth() {\r\n      this.token = null;\r\n      this.currentUser = null;\r\n    }\r\n  }\r\n});\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,OAAO;;AAEnC;AACA,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC,MAAM,EAAE;EAC9C;EACAE,KAAK,EAAEA,CAAA,MAAO;IACZC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,IAAI;IACXC,WAAW,EAAE;EACf,CAAC,CAAC;EAEF;EACAC,OAAO,EAAE;IACPC,WAAW,EAAGL,KAAK,IAAKA,KAAK,CAACC,KAAK;IACnCK,cAAc,EAAGN,KAAK,IAAKA,KAAK,CAACG,WAAW;IAC5CI,eAAe,EAAGP,KAAK,IAAK,CAAC,CAACA,KAAK,CAACE;EACtC,CAAC;EAED;EACAM,OAAO,EAAE;IACP;IACAC,OAAOA,CAACC,IAAI,EAAE;MACZ,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACC,EAAE,EAAE;QACrBC,OAAO,CAACC,KAAK,CAAC,uCAAuC,CAAC;QACtD;MACF;MACA,IAAI,IAAI,CAACZ,KAAK,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACJ,EAAE,KAAKD,IAAI,CAACC,EAAE,CAAC,EAAE;QAC1CC,OAAO,CAACI,IAAI,CAAC,gBAAgBN,IAAI,CAACC,EAAE,iBAAiB,CAAC;QACtD;MACF;MACA,IAAI,CAACV,KAAK,CAACgB,IAAI,CAACP,IAAI,CAAC;IACvB,CAAC;IAED;IACAQ,WAAWA,CAACP,EAAE,EAAE;MACd,OAAO,IAAI,CAACV,KAAK,CAACkB,IAAI,CAACT,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;IAChD,CAAC;IAED;IACAS,cAAcA,CAACT,EAAE,EAAE;MACjB,IAAI,CAACA,EAAE,EAAE;QACPC,OAAO,CAACC,KAAK,CAAC,mCAAmC,CAAC;QAClD,OAAO,KAAK;MACd;MACA,MAAMQ,aAAa,GAAG,IAAI,CAACpB,KAAK,CAACqB,MAAM;MACvC,IAAI,CAACrB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACsB,MAAM,CAACb,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MACtD,OAAO,IAAI,CAACV,KAAK,CAACqB,MAAM,GAAGD,aAAa;IAC1C,CAAC;IAED;IACAG,cAAcA,CAACd,IAAI,EAAE;MACnB,IAAI,CAACP,WAAW,GAAGO,IAAI;IACzB,CAAC;IAED;IACAe,QAAQA,CAACvB,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,GAAGA,KAAK;IACpB,CAAC;IAED;IACAwB,SAASA,CAAA,EAAG;MACV,IAAI,CAACxB,KAAK,GAAG,IAAI;MACjB,IAAI,CAACC,WAAW,GAAG,IAAI;IACzB;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}