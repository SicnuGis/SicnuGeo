{"ast":null,"code":"import axios from 'axios';\nimport { useUserStore } from '@/store/user.store';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 5000\n});\n\n// 请求拦截器，添加认证token\napi.interceptors.request.use(config => {\n  const userStore = useUserStore();\n  if (userStore.token) {\n    config.headers.Authorization = `Bearer ${userStore.token}`;\n  }\n  return config;\n});\n\n/**\n * 项目服务\n */\nexport const useProjectService = () => {\n  /**\n   * 获取所有项目\n   * @returns {Promise<Array>} 项目列表\n   */\n  const getAllProjects = async () => {\n    try {\n      const response = await api.get('/projects');\n      return response.data;\n    } catch (error) {\n      console.error('获取项目列表失败:', error);\n      throw error;\n    }\n  };\n\n  /**\n   * 获取项目详情\n   * @param {string} id - 项目ID\n   * @returns {Promise<Object>} 项目详情\n   */\n  const getProjectById = async id => {\n    try {\n      const response = await api.get(`/projects/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`获取项目 ${id} 详情失败:`, error);\n      throw error;\n    }\n  };\n\n  /**\n   * 创建项目\n   * @param {Object} projectData - 项目数据\n   * @returns {Promise<Object>} 创建的项目\n   */\n  const createProject = async projectData => {\n    try {\n      const response = await api.post('/projects', projectData);\n      return response.data;\n    } catch (error) {\n      console.error('创建项目失败:', error);\n      throw error;\n    }\n  };\n\n  /**\n   * 更新项目\n   * @param {string} id - 项目ID\n   * @param {Object} projectData - 项目数据\n   * @returns {Promise<Object>} 更新后的项目\n   */\n  const updateProject = async (id, projectData) => {\n    try {\n      const response = await api.put(`/projects/${id}`, projectData);\n      return response.data;\n    } catch (error) {\n      console.error(`更新项目 ${id} 失败:`, error);\n      throw error;\n    }\n  };\n\n  /**\n   * 删除项目\n   * @param {string} id - 项目ID\n   * @returns {Promise<void>}\n   */\n  const deleteProject = async id => {\n    try {\n      await api.delete(`/projects/${id}`);\n    } catch (error) {\n      console.error(`删除项目 ${id} 失败:`, error);\n      throw error;\n    }\n  };\n\n  /**\n   * 获取项目阶段\n   * @param {string} projectId - 项目ID\n   * @returns {Promise<Array>} 项目阶段列表\n   */\n  const getProjectPhases = async projectId => {\n    try {\n      const response = await api.get(`/projects/${projectId}/phases`);\n      return response.data;\n    } catch (error) {\n      console.error(`获取项目 ${projectId} 阶段失败:`, error);\n      throw error;\n    }\n  };\n\n  /**\n   * 订阅项目\n   * @param {string} projectId - 项目ID\n   * @returns {Promise<void>}\n   */\n  const subscribeProject = async projectId => {\n    try {\n      await api.post(`/projects/${projectId}/subscribe`);\n    } catch (error) {\n      console.error(`订阅项目 ${projectId} 失败:`, error);\n      throw error;\n    }\n  };\n\n  /**\n   * 取消订阅项目\n   * @param {string} projectId - 项目ID\n   * @returns {Promise<void>}\n   */\n  const unsubscribeProject = async projectId => {\n    try {\n      await api.delete(`/projects/${projectId}/subscribe`);\n    } catch (error) {\n      console.error(`取消订阅项目 ${projectId} 失败:`, error);\n      throw error;\n    }\n  };\n  return {\n    getAllProjects,\n    getProjectById,\n    createProject,\n    updateProject,\n    deleteProject,\n    getProjectPhases,\n    subscribeProject,\n    unsubscribeProject\n  };\n};\nexport default useProjectService;","map":{"version":3,"names":["axios","useUserStore","api","create","baseURL","timeout","interceptors","request","use","config","userStore","token","headers","Authorization","useProjectService","getAllProjects","response","get","data","error","console","getProjectById","id","createProject","projectData","post","updateProject","put","deleteProject","delete","getProjectPhases","projectId","subscribeProject","unsubscribeProject"],"sources":["C:/Users/hrs28/.trae-cn/SicnuGeo/shared-city-version/src/services/project.service.js"],"sourcesContent":["import axios from 'axios';\nimport { useUserStore } from '@/store/user.store';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 5000\n});\n\n// 请求拦截器，添加认证token\napi.interceptors.request.use(config => {\n  const userStore = useUserStore();\n  if (userStore.token) {\n    config.headers.Authorization = `Bearer ${userStore.token}`;\n  }\n  return config;\n});\n\n/**\n * 项目服务\n */\nexport const useProjectService = () => {\n  /**\n   * 获取所有项目\n   * @returns {Promise<Array>} 项目列表\n   */\n  const getAllProjects = async () => {\n    try {\n      const response = await api.get('/projects');\n      return response.data;\n    } catch (error) {\n      console.error('获取项目列表失败:', error);\n      throw error;\n    }\n  };\n\n  /**\n   * 获取项目详情\n   * @param {string} id - 项目ID\n   * @returns {Promise<Object>} 项目详情\n   */\n  const getProjectById = async (id) => {\n    try {\n      const response = await api.get(`/projects/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`获取项目 ${id} 详情失败:`, error);\n      throw error;\n    }\n  };\n\n  /**\n   * 创建项目\n   * @param {Object} projectData - 项目数据\n   * @returns {Promise<Object>} 创建的项目\n   */\n  const createProject = async (projectData) => {\n    try {\n      const response = await api.post('/projects', projectData);\n      return response.data;\n    } catch (error) {\n      console.error('创建项目失败:', error);\n      throw error;\n    }\n  };\n\n  /**\n   * 更新项目\n   * @param {string} id - 项目ID\n   * @param {Object} projectData - 项目数据\n   * @returns {Promise<Object>} 更新后的项目\n   */\n  const updateProject = async (id, projectData) => {\n    try {\n      const response = await api.put(`/projects/${id}`, projectData);\n      return response.data;\n    } catch (error) {\n      console.error(`更新项目 ${id} 失败:`, error);\n      throw error;\n    }\n  };\n\n  /**\n   * 删除项目\n   * @param {string} id - 项目ID\n   * @returns {Promise<void>}\n   */\n  const deleteProject = async (id) => {\n    try {\n      await api.delete(`/projects/${id}`);\n    } catch (error) {\n      console.error(`删除项目 ${id} 失败:`, error);\n      throw error;\n    }\n  };\n\n  /**\n   * 获取项目阶段\n   * @param {string} projectId - 项目ID\n   * @returns {Promise<Array>} 项目阶段列表\n   */\n  const getProjectPhases = async (projectId) => {\n    try {\n      const response = await api.get(`/projects/${projectId}/phases`);\n      return response.data;\n    } catch (error) {\n      console.error(`获取项目 ${projectId} 阶段失败:`, error);\n      throw error;\n    }\n  };\n\n  /**\n   * 订阅项目\n   * @param {string} projectId - 项目ID\n   * @returns {Promise<void>}\n   */\n  const subscribeProject = async (projectId) => {\n    try {\n      await api.post(`/projects/${projectId}/subscribe`);\n    } catch (error) {\n      console.error(`订阅项目 ${projectId} 失败:`, error);\n      throw error;\n    }\n  };\n\n  /**\n   * 取消订阅项目\n   * @param {string} projectId - 项目ID\n   * @returns {Promise<void>}\n   */\n  const unsubscribeProject = async (projectId) => {\n    try {\n      await api.delete(`/projects/${projectId}/subscribe`);\n    } catch (error) {\n      console.error(`取消订阅项目 ${projectId} 失败:`, error);\n      throw error;\n    }\n  };\n\n  return {\n    getAllProjects,\n    getProjectById,\n    createProject,\n    updateProject,\n    deleteProject,\n    getProjectPhases,\n    subscribeProject,\n    unsubscribeProject\n  };\n};\n\nexport default useProjectService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}