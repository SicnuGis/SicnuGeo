{"ast":null,"code":"// 项目存储 - 使用 Pinia 实现\nimport { defineStore } from 'pinia';\n\n// 创建 Pinia store\nexport const useProjectStore = defineStore('project', {\n  // 状态定义\n  state: () => ({\n    projects: [],\n    selectedProject: null,\n    subscribedProjects: []\n  }),\n  // 获取器 - 用于派生状态\n  getters: {\n    // 获取所有项目\n    getAllProjects: state => state.projects,\n    // 获取选中的项目\n    getSelectedProject: state => state.selectedProject,\n    // 根据 ID 获取项目\n    getProjectById: state => id => {\n      return state.projects.find(project => project.id === id);\n    },\n    // 检查是否订阅了项目\n    isSubscribed: state => projectId => {\n      return state.subscribedProjects.includes(projectId);\n    },\n    // 获取订阅的项目列表\n    getSubscribedProjects: state => {\n      return state.projects.filter(project => state.subscribedProjects.includes(project.id));\n    }\n  },\n  // 动作 - 用于修改状态\n  actions: {\n    // 添加项目\n    addProject(project) {\n      if (!project || !project.id) {\n        console.error('Invalid project: Missing required fields');\n        return;\n      }\n      // 检查项目是否已存在\n      if (this.projects.some(p => p.id === project.id)) {\n        console.warn(`Project with ID ${project.id} already exists`);\n        return;\n      }\n      this.projects.push(project);\n    },\n    // 批量设置项目\n    setProjects(projects) {\n      if (!Array.isArray(projects)) {\n        console.error('Invalid projects data: Must be an array');\n        return;\n      }\n      this.projects = projects;\n    },\n    // 根据 ID 更新项目\n    updateProjectById(id, updatedData) {\n      if (!id || !updatedData) {\n        console.error('Invalid parameters: ID and updatedData are required');\n        return false;\n      }\n      const index = this.projects.findIndex(project => project.id === id);\n      if (index !== -1) {\n        this.projects[index] = {\n          ...this.projects[index],\n          ...updatedData\n        };\n        return true;\n      }\n      console.warn(`Project with ID ${id} not found`);\n      return false;\n    },\n    // 根据 ID 删除项目\n    deleteProjectById(id) {\n      if (!id) {\n        console.error('Invalid parameter: ID is required');\n        return false;\n      }\n      const initialLength = this.projects.length;\n      this.projects = this.projects.filter(project => project.id !== id);\n      // 如果删除的是选中的项目，则清空选中项目\n      if (this.selectedProject && this.selectedProject.id === id) {\n        this.selectedProject = null;\n      }\n      // 从订阅列表中移除\n      this.subscribedProjects = this.subscribedProjects.filter(projectId => projectId !== id);\n      return this.projects.length < initialLength;\n    },\n    // 设置选中的项目\n    setSelectedProject(project) {\n      this.selectedProject = project;\n    },\n    // 订阅项目\n    subscribeProject(projectId) {\n      if (!projectId) {\n        console.error('Invalid parameter: projectId is required');\n        return false;\n      }\n      // 检查项目是否存在\n      if (!this.projects.some(p => p.id === projectId)) {\n        console.warn(`Cannot subscribe to non-existent project with ID ${projectId}`);\n        return false;\n      }\n      if (!this.subscribedProjects.includes(projectId)) {\n        this.subscribedProjects.push(projectId);\n        return true;\n      }\n      return false;\n    },\n    // 取消订阅项目\n    unsubscribeProject(projectId) {\n      if (!projectId) {\n        console.error('Invalid parameter: projectId is required');\n        return false;\n      }\n      const initialLength = this.subscribedProjects.length;\n      this.subscribedProjects = this.subscribedProjects.filter(id => id !== projectId);\n      return this.subscribedProjects.length < initialLength;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","useProjectStore","state","projects","selectedProject","subscribedProjects","getters","getAllProjects","getSelectedProject","getProjectById","id","find","project","isSubscribed","projectId","includes","getSubscribedProjects","filter","actions","addProject","console","error","some","p","warn","push","setProjects","Array","isArray","updateProjectById","updatedData","index","findIndex","deleteProjectById","initialLength","length","setSelectedProject","subscribeProject","unsubscribeProject"],"sources":["C:/Users/hrs28/.trae-cn/SicnuGeo/shared-city-version/src/store/project.store.js"],"sourcesContent":["// 项目存储 - 使用 Pinia 实现\nimport { defineStore } from 'pinia';\n\n// 创建 Pinia store\nexport const useProjectStore = defineStore('project', {\n  // 状态定义\n  state: () => ({\n    projects: [],\n    selectedProject: null,\n    subscribedProjects: []\n  }),\n\n  // 获取器 - 用于派生状态\n    getters: {\n    // 获取所有项目\n    getAllProjects: (state) => state.projects,\n\n    // 获取选中的项目\n    getSelectedProject: (state) => state.selectedProject,\n\n    // 根据 ID 获取项目\n    getProjectById: (state) => (id) => {\n      return state.projects.find(project => project.id === id);\n    },\n\n    // 检查是否订阅了项目\n    isSubscribed: (state) => (projectId) => {\n      return state.subscribedProjects.includes(projectId);\n    },\n\n    // 获取订阅的项目列表\n    getSubscribedProjects: (state) => {\n      return state.projects.filter(project => state.subscribedProjects.includes(project.id));\n    }\n  },\n\n  // 动作 - 用于修改状态\n    actions: {\n    // 添加项目\n    addProject(project) {\n      if (!project || !project.id) {\n        console.error('Invalid project: Missing required fields');\n        return;\n      }\n      // 检查项目是否已存在\n      if (this.projects.some(p => p.id === project.id)) {\n        console.warn(`Project with ID ${project.id} already exists`);\n        return;\n      }\n      this.projects.push(project);\n    },\n\n    // 批量设置项目\n    setProjects(projects) {\n      if (!Array.isArray(projects)) {\n        console.error('Invalid projects data: Must be an array');\n        return;\n      }\n      this.projects = projects;\n    },\n\n    // 根据 ID 更新项目\n    updateProjectById(id, updatedData) {\n      if (!id || !updatedData) {\n        console.error('Invalid parameters: ID and updatedData are required');\n        return false;\n      }\n      const index = this.projects.findIndex(project => project.id === id);\n      if (index !== -1) {\n        this.projects[index] = { ...this.projects[index], ...updatedData };\n        return true;\n      }\n      console.warn(`Project with ID ${id} not found`);\n      return false;\n    },\n\n    // 根据 ID 删除项目\n    deleteProjectById(id) {\n      if (!id) {\n        console.error('Invalid parameter: ID is required');\n        return false;\n      }\n      const initialLength = this.projects.length;\n      this.projects = this.projects.filter(project => project.id !== id);\n      // 如果删除的是选中的项目，则清空选中项目\n      if (this.selectedProject && this.selectedProject.id === id) {\n        this.selectedProject = null;\n      }\n      // 从订阅列表中移除\n      this.subscribedProjects = this.subscribedProjects.filter(projectId => projectId !== id);\n      return this.projects.length < initialLength;\n    },\n\n    // 设置选中的项目\n    setSelectedProject(project) {\n      this.selectedProject = project;\n    },\n\n    // 订阅项目\n    subscribeProject(projectId) {\n      if (!projectId) {\n        console.error('Invalid parameter: projectId is required');\n        return false;\n      }\n      // 检查项目是否存在\n      if (!this.projects.some(p => p.id === projectId)) {\n        console.warn(`Cannot subscribe to non-existent project with ID ${projectId}`);\n        return false;\n      }\n      if (!this.subscribedProjects.includes(projectId)) {\n        this.subscribedProjects.push(projectId);\n        return true;\n      }\n      return false;\n    },\n\n    // 取消订阅项目\n    unsubscribeProject(projectId) {\n      if (!projectId) {\n        console.error('Invalid parameter: projectId is required');\n        return false;\n      }\n      const initialLength = this.subscribedProjects.length;\n      this.subscribedProjects = this.subscribedProjects.filter(id => id !== projectId);\n      return this.subscribedProjects.length < initialLength;\n    }\n  }\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}