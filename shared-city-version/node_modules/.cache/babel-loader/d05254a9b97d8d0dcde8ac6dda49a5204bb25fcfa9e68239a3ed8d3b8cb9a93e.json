{"ast":null,"code":"import { ref, onMounted, onUnmounted, watch, computed } from 'vue';\nimport * as echarts from 'echarts';\nimport { useRoute } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { useProjectService } from '@/services/project.service';\n\n// 项目ID，从路由参数获取\n\nexport default {\n  __name: 'ProjectTimeLine',\n  setup(__props) {\n    const route = useRoute();\n    const projectId = ref(route.params.id || '');\n\n    // 引用\n    const ganttContainer = ref(null);\n    let chartInstance = null;\n\n    // 状态\n    const projectPhases = ref([]);\n    const selectedPhase = ref(null);\n    const loading = ref(true);\n    const projectName = ref('项目时间线');\n\n    // Vuex store 和服务\n    const store = useStore();\n    const projectService = useProjectService();\n\n    // 计算属性 - 检查是否订阅\n    const isSubscribed = computed(() => {\n      return store.getters.isProjectSubscribed(projectId.value);\n    });\n\n    // 初始化图表\n    onMounted(async () => {\n      // 加载项目数据\n      await loadProjectData();\n      // 创建甘特图\n      initGanttChart();\n      loading.value = false;\n    });\n\n    // 卸载组件\n    onUnmounted(() => {\n      if (chartInstance) {\n        chartInstance.dispose();\n        chartInstance = null;\n      }\n    });\n\n    // 监听项目阶段变化，更新图表\n    watch(projectPhases, () => {\n      if (chartInstance) {\n        updateGanttChart();\n      }\n    });\n\n    // 加载项目数据\n    const loadProjectData = async () => {\n      try {\n        // 获取项目详情\n        const project = await projectService.getProjectById(projectId.value);\n        projectName.value = project.name;\n\n        // 获取项目阶段\n        const phases = await projectService.getProjectPhases(projectId.value);\n        projectPhases.value = phases;\n\n        // 更新Vuex store\n        store.dispatch('setProjects', [project]);\n        store.dispatch('setSelectedProject', project);\n      } catch (error) {\n        console.error('加载项目数据失败:', error);\n        // 显示错误提示\n        alert('加载项目数据失败，请重试');\n      }\n    };\n\n    // 切换订阅状态\n    const toggleSubscription = async () => {\n      try {\n        if (isSubscribed.value) {\n          await projectService.unsubscribeProject(projectId.value);\n          store.dispatch('unsubscribeProject', projectId.value);\n        } else {\n          await projectService.subscribeProject(projectId.value);\n          store.dispatch('subscribeProject', projectId.value);\n        }\n      } catch (error) {\n        console.error('切换订阅状态失败:', error);\n        alert('操作失败，请重试');\n      }\n    };\n\n    // 初始化甘特图\n    const initGanttChart = () => {\n      if (!ganttContainer.value) return;\n      chartInstance = echarts.init(ganttContainer.value);\n      updateGanttChart();\n\n      // 监听窗口大小变化，调整图表大小\n      window.addEventListener('resize', () => {\n        chartInstance.resize();\n      });\n    };\n\n    // 更新甘特图\n    const updateGanttChart = () => {\n      if (!chartInstance || projectPhases.value.length === 0) return;\n\n      // 准备图表数据\n      const chartData = projectPhases.value.map(phase => ({\n        name: phase.name,\n        value: [phase.startDate, phase.endDate, phase.progress || 0],\n        itemStyle: {\n          color: getPhaseColor(phase)\n        }\n      }));\n\n      // 计算时间范围\n      const allDates = projectPhases.value.flatMap(phase => [new Date(phase.startDate), new Date(phase.endDate)]);\n      const minDate = new Date(Math.min(...allDates));\n      const maxDate = new Date(Math.max(...allDates));\n      // 扩展时间范围，增加一些边距\n      minDate.setMonth(minDate.getMonth() - 1);\n      maxDate.setMonth(maxDate.getMonth() + 1);\n\n      // 图表配置\n      const option = {\n        tooltip: {\n          formatter: function (params) {\n            const phase = projectPhases.value.find(p => p.name === params.name);\n            if (!phase) return '';\n            return `\n          <div class=\"tooltip-title\">${phase.name}</div>\n          <div>开始: ${formatDate(phase.startDate)}</div>\n          <div>结束: ${formatDate(phase.endDate)}</div>\n          <div>进度: ${phase.progress || 0}%</div>\n          <div>${isPhaseDelayed(phase) ? '<span style=\"color:red\">延期</span>' : '正常'}</div>\n        `;\n          }\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'time',\n          min: minDate,\n          max: maxDate,\n          axisLabel: {\n            formatter: '{MM}/{dd}/{yyyy}'\n          }\n        },\n        yAxis: {\n          type: 'category',\n          data: projectPhases.value.map(phase => phase.name),\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          }\n        },\n        series: [{\n          name: '项目阶段',\n          type: 'custom',\n          renderItem: renderItem,\n          itemStyle: {},\n          encode: {\n            x: [0, 1],\n            y: 0\n          },\n          data: chartData\n        }]\n      };\n      chartInstance.setOption(option);\n\n      // 绑定点击事件\n      chartInstance.on('click', params => {\n        const phase = projectPhases.value.find(p => p.name === params.name);\n        if (phase) {\n          selectedPhase.value = phase;\n        }\n      });\n    };\n\n    // 自定义甘特图项渲染\n    const renderItem = (params, api) => {\n      const categoryIndex = api.value(0);\n      const start = api.coord([api.value(1), categoryIndex]);\n      const end = api.coord([api.value(2), categoryIndex]);\n      const height = api.size([0, 1])[1] * 0.6;\n\n      // 计算进度条宽度\n      const progress = api.value(3) || 0;\n      const progressWidth = (end[0] - start[0]) * (progress / 100);\n\n      // 背景条\n      const rectShape = echarts.graphic.clipRectByRect({\n        x: start[0],\n        y: start[1] - height / 2,\n        width: end[0] - start[0],\n        height: height\n      }, {\n        x: params.coordSys.x,\n        y: params.coordSys.y,\n        width: params.coordSys.width,\n        height: params.coordSys.height\n      });\n\n      // 进度条\n      const progressShape = echarts.graphic.clipRectByRect({\n        x: start[0],\n        y: start[1] - height / 2,\n        width: progressWidth,\n        height: height\n      }, {\n        x: params.coordSys.x,\n        y: params.coordSys.y,\n        width: params.coordSys.width,\n        height: params.coordSys.height\n      });\n\n      // 阶段名称\n      const textStyle = {\n        text: api.value(0),\n        fill: '#000',\n        fontSize: 12,\n        x: start[0] + 5,\n        y: start[1] + height / 2,\n        verticalAlign: 'middle'\n      };\n      if (rectShape && progressShape) {\n        return [{\n          type: 'rect',\n          transition: ['shape'],\n          shape: rectShape,\n          style: {\n            fill: '#e6e6e6',\n            stroke: '#999',\n            lineWidth: 1\n          }\n        }, {\n          type: 'rect',\n          transition: ['shape'],\n          shape: progressShape,\n          style: {\n            fill: api.style('color') || '#1890ff',\n            stroke: '#0066cc',\n            lineWidth: 1\n          }\n        }, {\n          type: 'text',\n          style: textStyle\n        }];\n      }\n    };\n\n    // 根据阶段状态获取颜色\n    const getPhaseColor = phase => {\n      if (isPhaseDelayed(phase)) {\n        return '#ff4d4f'; // 红色表示延期\n      }\n      const progress = phase.progress || 0;\n      if (progress === 100) {\n        return '#52c41a'; // 绿色表示完成\n      } else if (progress > 0) {\n        return '#1890ff'; // 蓝色表示进行中\n      } else {\n        return '#faad14'; // 黄色表示未开始\n      }\n    };\n\n    // 检查阶段是否延期\n    const isPhaseDelayed = phase => {\n      const today = new Date();\n      const endDate = new Date(phase.endDate);\n      const progress = phase.progress || 0;\n      return today > endDate && progress < 100;\n    };\n\n    // 格式化日期\n    const formatDate = dateString => {\n      const date = new Date(dateString);\n      return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n    };\n    return {\n      __sfc: true,\n      route,\n      projectId,\n      ganttContainer,\n      chartInstance,\n      projectPhases,\n      selectedPhase,\n      loading,\n      projectName,\n      store,\n      projectService,\n      isSubscribed,\n      loadProjectData,\n      toggleSubscription,\n      initGanttChart,\n      updateGanttChart,\n      renderItem,\n      getPhaseColor,\n      isPhaseDelayed,\n      formatDate\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","watch","computed","echarts","useRoute","useStore","useProjectService","route","projectId","params","id","ganttContainer","chartInstance","projectPhases","selectedPhase","loading","projectName","store","projectService","isSubscribed","getters","isProjectSubscribed","value","loadProjectData","initGanttChart","dispose","updateGanttChart","project","getProjectById","name","phases","getProjectPhases","dispatch","error","console","alert","toggleSubscription","unsubscribeProject","subscribeProject","init","window","addEventListener","resize","length","chartData","map","phase","startDate","endDate","progress","itemStyle","color","getPhaseColor","allDates","flatMap","Date","minDate","Math","min","maxDate","max","setMonth","getMonth","option","tooltip","formatter","find","p","formatDate","isPhaseDelayed","grid","left","right","bottom","containLabel","xAxis","type","axisLabel","yAxis","data","axisLine","show","axisTick","series","renderItem","encode","x","y","setOption","on","api","categoryIndex","start","coord","end","height","size","progressWidth","rectShape","graphic","clipRectByRect","width","coordSys","progressShape","textStyle","text","fill","fontSize","verticalAlign","transition","shape","style","stroke","lineWidth","today","dateString","date","getFullYear","toString","padStart","getDate"],"sources":["ProjectTimeLine.vue"],"sourcesContent":["<template>\r\n  <div class=\"project-timeline-container\">\r\n    <div class=\"timeline-header\">\r\n      <h2>{{ projectName }}</h2>\r\n      <button \r\n        class=\"subscribe-btn\" \r\n        :class=\"{ 'subscribed': isSubscribed }\"\r\n        @click=\"toggleSubscription\"\r\n      >\r\n        {{ isSubscribed ? '取消订阅' : '订阅更新' }}\r\n      </button>\r\n    </div>\r\n\r\n    <!-- 甘特图容器 -->\r\n    <div ref=\"ganttContainer\" class=\"gantt-container\"></div>\r\n\r\n    <!-- 项目阶段详情 -->\r\n    <div class=\"phase-details\" v-if=\"selectedPhase\">\r\n      <h3>{{ selectedPhase.name }}</h3>\r\n      <p>{{ selectedPhase.description }}</p>\r\n      <div class=\"phase-dates\">\r\n        <span>开始: {{ formatDate(selectedPhase.startDate) }}</span>\r\n        <span>结束: {{ formatDate(selectedPhase.endDate) }}</span>\r\n        <span :class=\"{ 'delayed': isPhaseDelayed(selectedPhase) }\">{{ isPhaseDelayed(selectedPhase) ? '延期' : '正常' }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, onUnmounted, watch, computed } from 'vue'\r\nimport * as echarts from 'echarts'\r\nimport { useRoute } from 'vue-router'\r\nimport { useStore } from 'vuex'\r\nimport { useProjectService } from '@/services/project.service'\r\n\r\n// 项目ID，从路由参数获取\r\nconst route = useRoute()\r\nconst projectId = ref(route.params.id || '')\r\n\r\n// 引用\r\nconst ganttContainer = ref(null)\r\nlet chartInstance = null\r\n\r\n// 状态\r\nconst projectPhases = ref([])\r\nconst selectedPhase = ref(null)\r\nconst loading = ref(true)\r\nconst projectName = ref('项目时间线')\r\n\r\n// Vuex store 和服务\r\nconst store = useStore()\r\nconst projectService = useProjectService()\r\n\r\n// 计算属性 - 检查是否订阅\r\nconst isSubscribed = computed(() => {\r\n  return store.getters.isProjectSubscribed(projectId.value)\r\n})\r\n\r\n// 初始化图表\r\nonMounted(async () => {\r\n  // 加载项目数据\r\n  await loadProjectData()\r\n  // 创建甘特图\r\n  initGanttChart()\r\n  loading.value = false\r\n})\r\n\r\n// 卸载组件\r\nonUnmounted(() => {\r\n  if (chartInstance) {\r\n    chartInstance.dispose()\r\n    chartInstance = null\r\n  }\r\n})\r\n\r\n// 监听项目阶段变化，更新图表\r\nwatch(projectPhases, () => {\r\n  if (chartInstance) {\r\n    updateGanttChart()\r\n  }\r\n})\r\n\r\n// 加载项目数据\r\nconst loadProjectData = async () => {\r\n  try {\r\n    // 获取项目详情\r\n    const project = await projectService.getProjectById(projectId.value)\r\n    projectName.value = project.name\r\n\r\n    // 获取项目阶段\r\n    const phases = await projectService.getProjectPhases(projectId.value)\r\n    projectPhases.value = phases\r\n\r\n    // 更新Vuex store\r\n    store.dispatch('setProjects', [project])\r\n    store.dispatch('setSelectedProject', project)\r\n  } catch (error) {\r\n    console.error('加载项目数据失败:', error)\r\n    // 显示错误提示\r\n    alert('加载项目数据失败，请重试')\r\n  }\r\n}\r\n\r\n// 切换订阅状态\r\nconst toggleSubscription = async () => {\r\n  try {\r\n    if (isSubscribed.value) {\r\n      await projectService.unsubscribeProject(projectId.value)\r\n      store.dispatch('unsubscribeProject', projectId.value)\r\n    } else {\r\n      await projectService.subscribeProject(projectId.value)\r\n      store.dispatch('subscribeProject', projectId.value)\r\n    }\r\n  } catch (error) {\r\n    console.error('切换订阅状态失败:', error)\r\n    alert('操作失败，请重试')\r\n  }\r\n}\r\n\r\n// 初始化甘特图\r\nconst initGanttChart = () => {\r\n  if (!ganttContainer.value) return\r\n\r\n  chartInstance = echarts.init(ganttContainer.value)\r\n  updateGanttChart()\r\n\r\n  // 监听窗口大小变化，调整图表大小\r\n  window.addEventListener('resize', () => {\r\n    chartInstance.resize()\r\n  })\r\n}\r\n\r\n// 更新甘特图\r\nconst updateGanttChart = () => {\r\n  if (!chartInstance || projectPhases.value.length === 0) return\r\n\r\n  // 准备图表数据\r\n  const chartData = projectPhases.value.map(phase => ({\r\n    name: phase.name,\r\n    value: [\r\n      phase.startDate,\r\n      phase.endDate,\r\n      phase.progress || 0\r\n    ],\r\n    itemStyle: {\r\n      color: getPhaseColor(phase)\r\n    }\r\n  }))\r\n\r\n  // 计算时间范围\r\n  const allDates = projectPhases.value.flatMap(phase => [new Date(phase.startDate), new Date(phase.endDate)])\r\n  const minDate = new Date(Math.min(...allDates))\r\n  const maxDate = new Date(Math.max(...allDates))\r\n  // 扩展时间范围，增加一些边距\r\n  minDate.setMonth(minDate.getMonth() - 1)\r\n  maxDate.setMonth(maxDate.getMonth() + 1)\r\n\r\n  // 图表配置\r\n  const option = {\r\n    tooltip: {\r\n      formatter: function(params) {\r\n        const phase = projectPhases.value.find(p => p.name === params.name)\r\n        if (!phase) return ''\r\n\r\n        return `\r\n          <div class=\"tooltip-title\">${phase.name}</div>\r\n          <div>开始: ${formatDate(phase.startDate)}</div>\r\n          <div>结束: ${formatDate(phase.endDate)}</div>\r\n          <div>进度: ${phase.progress || 0}%</div>\r\n          <div>${isPhaseDelayed(phase) ? '<span style=\"color:red\">延期</span>' : '正常'}</div>\r\n        `\r\n      }\r\n    },\r\n    grid: {\r\n      left: '3%',\r\n      right: '4%',\r\n      bottom: '3%',\r\n      containLabel: true\r\n    },\r\n    xAxis: {\r\n      type: 'time',\r\n      min: minDate,\r\n      max: maxDate,\r\n      axisLabel: {\r\n        formatter: '{MM}/{dd}/{yyyy}'\r\n      }\r\n    },\r\n    yAxis: {\r\n      type: 'category',\r\n      data: projectPhases.value.map(phase => phase.name),\r\n      axisLine: { show: false },\r\n      axisTick: { show: false }\r\n    },\r\n    series: [\r\n      {\r\n        name: '项目阶段',\r\n        type: 'custom',\r\n        renderItem: renderItem,\r\n        itemStyle: {},\r\n        encode: {\r\n          x: [0, 1],\r\n          y: 0\r\n        },\r\n        data: chartData\r\n      }\r\n    ]\r\n  }\r\n\r\n  chartInstance.setOption(option)\r\n\r\n  // 绑定点击事件\r\n  chartInstance.on('click', (params) => {\r\n    const phase = projectPhases.value.find(p => p.name === params.name)\r\n    if (phase) {\r\n      selectedPhase.value = phase\r\n    }\r\n  })\r\n}\r\n\r\n// 自定义甘特图项渲染\r\nconst renderItem = (params, api) => {\r\n  const categoryIndex = api.value(0)\r\n  const start = api.coord([api.value(1), categoryIndex])\r\n  const end = api.coord([api.value(2), categoryIndex])\r\n  const height = api.size([0, 1])[1] * 0.6\r\n\r\n  // 计算进度条宽度\r\n  const progress = api.value(3) || 0\r\n  const progressWidth = (end[0] - start[0]) * (progress / 100)\r\n\r\n  // 背景条\r\n  const rectShape = echarts.graphic.clipRectByRect({\r\n    x: start[0],\r\n    y: start[1] - height / 2,\r\n    width: end[0] - start[0],\r\n    height: height\r\n  }, {\r\n    x: params.coordSys.x,\r\n    y: params.coordSys.y,\r\n    width: params.coordSys.width,\r\n    height: params.coordSys.height\r\n  })\r\n\r\n  // 进度条\r\n  const progressShape = echarts.graphic.clipRectByRect({\r\n    x: start[0],\r\n    y: start[1] - height / 2,\r\n    width: progressWidth,\r\n    height: height\r\n  }, {\r\n    x: params.coordSys.x,\r\n    y: params.coordSys.y,\r\n    width: params.coordSys.width,\r\n    height: params.coordSys.height\r\n  })\r\n\r\n  // 阶段名称\r\n  const textStyle = {\r\n    text: api.value(0),\r\n    fill: '#000',\r\n    fontSize: 12,\r\n    x: start[0] + 5,\r\n    y: start[1] + height / 2,\r\n    verticalAlign: 'middle'\r\n  }\r\n\r\n  if (rectShape && progressShape) {\r\n    return [\r\n      {\r\n        type: 'rect',\r\n        transition: ['shape'],\r\n        shape: rectShape,\r\n        style: {\r\n          fill: '#e6e6e6',\r\n          stroke: '#999',\r\n          lineWidth: 1\r\n        }\r\n      },\r\n      {\r\n        type: 'rect',\r\n        transition: ['shape'],\r\n        shape: progressShape,\r\n        style: {\r\n          fill: api.style('color') || '#1890ff',\r\n          stroke: '#0066cc',\r\n          lineWidth: 1\r\n        }\r\n      },\r\n      {\r\n        type: 'text',\r\n        style: textStyle\r\n      }\r\n    ]\r\n  }\r\n}\r\n\r\n// 根据阶段状态获取颜色\r\nconst getPhaseColor = (phase) => {\r\n  if (isPhaseDelayed(phase)) {\r\n    return '#ff4d4f' // 红色表示延期\r\n  }\r\n\r\n  const progress = phase.progress || 0\r\n  if (progress === 100) {\r\n    return '#52c41a' // 绿色表示完成\r\n  } else if (progress > 0) {\r\n    return '#1890ff' // 蓝色表示进行中\r\n  } else {\r\n    return '#faad14' // 黄色表示未开始\r\n  }\r\n}\r\n\r\n// 检查阶段是否延期\r\nconst isPhaseDelayed = (phase) => {\r\n  const today = new Date()\r\n  const endDate = new Date(phase.endDate)\r\n  const progress = phase.progress || 0\r\n\r\n  return today > endDate && progress < 100\r\n}\r\n\r\n// 格式化日期\r\nconst formatDate = (dateString) => {\r\n  const date = new Date(dateString)\r\n  return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.project-timeline-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.timeline-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px 0;\r\n  margin-bottom: 15px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.subscribe-btn {\r\n  padding: 6px 16px;\r\n  background-color: #1890ff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.subscribe-btn.subscribed {\r\n  background-color: #f5f5f5;\r\n  color: #333;\r\n}\r\n\r\n.gantt-container {\r\n  flex: 1;\r\n  min-height: 300px;\r\n}\r\n\r\n.phase-details {\r\n  margin-top: 20px;\r\n  padding: 15px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 4px;\r\n  border-left: 4px solid #1890ff;\r\n}\r\n\r\n.phase-dates {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-top: 10px;\r\n  color: #666;\r\n}\r\n\r\n.delayed {\r\n  color: #ff4d4f;\r\n  font-weight: bold;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}